% -------------------------------------------------------------------------% PBARNL: Programa de elementos finitos tipo barra a código abierto.%         versión 1.0: Análisis No lineal de armaduras planas% -------------------------------------------------------------------------% Universidad Nacional de Colombia% Facultad de Ingeniería% Todos los derechos reservados, 2018% function PBARNL (ADAT)  clc; % limpiar pantalla    addpath('./FUNCIONES'); addpath('./DATOS'); % adicionar carpetas  TINT = IMTIEM('PBARNL - Octave. Universidad Nacional de Colombia 2018 \n',0);    TINI = IMTIEM('Lectura de datos de entrada',0);  % -------------------------------------------------------------------------  run(ADAT); % leer datos de entrada de un archivo .m   ELE = int32(ELE); % cambio de tipo de datos para las matrices enteras  % parámetros adicionales para el tipo de problema  switch TIPR  case 10 % armadura plana    PMAT = 3; % número de propiedades de cada material [ EYOU POIS GAMM ]    PELE = 4; % número de propiedades de cada elemento [ AREA TIPE NUEL PGAU ]    PCAT = PMAT+PELE;    % número de propiedades en cada categoria    NCOM = 1; % NCOM: número de componentes de esfuerzo o deformación  case (20 || 21)  % condición plana de esfuerzos o de deformaciones    PMAT = 3; % número de propiedades de cada material [ EYOU POIS GAMM ]    PELE = 4; % número de propiedades de cada elemento [ TESP TIPE NUEL PGAU ]    PCAT = PMAT+PELE;    % número de propiedades en cada categoria    NCOM = 3; % NCOM: número de componentes de esfuerzo o deformación  end %endswitch  TFIN = IMTIEM('',TINI);    TINI = IMTIEM('Grados de libertad de nudos y elementos',0);  % -------------------------------------------------------------------------  % A partir de la tabla de desplazamientos conocidos de algunos nudos UCO()  % se crea la tabla de GL por nudo MGL(), el subvector de desplazamientos   % conocidos UBB() y se obtiene el número de GL por nudo NGLN y el número de  % GL conocidos NGLC.  [MGL,UBB,NGLN,NGLC] = NGLUCO(UCO,NNUD);  NGLT = NNUD*NGLN;  % número de grados de libertad del sólido  NGLD = NGLT-NGLC;  % número de grados de libertad conocidos  % Se crea la tabla de GLs por elemento o matriz de incidencias  [INC] = NGLELE(ELE,MGL);  TFIN = IMTIEM('',TINI);    TINI = IMTIEM('Matriz de rigidez del solido',0);  % -------------------------------------------------------------------------  KGS = zeros(NGLT,NGLT); % definición de tamaño de la matriz de rigidez sólido  for IELE = 1:NELE    % matriz de rigidéz de elemento    CAE(1:PCAT) = CAT(ELE(IELE,1),1:PCAT); % propiedades de la categ eleme IELE    NUEL = CAE(1,PMAT+3);  % número de nudos del elemento IELE    XYE(1:NUEL,1:NDIM) = XYZ(ELE(IELE,2:NUEL+1),1:NDIM); % coor nud de elem IELE    [KEL] = KELEME(TIPR,XYE,CAE); % matriz de rigidez del elem IELE    % ensamblaje de KEL() del elemento IELE en KGS() del sólido    NKEL = size(KEL,1); % tamaño de la matriz de rigidez del elemento    for IKEL=1:NKEL      for JKEL=1:NKEL        if ( INC(IELE, IKEL) ~= 0 & INC(IELE, JKEL) ~= 0)          KGS(INC(IELE, IKEL), INC(IELE, JKEL)) = ...          KGS(INC(IELE, IKEL), INC(IELE, JKEL)) + KEL(IKEL, JKEL);        end % endif      end % endfor JKEL    end % endfor IKEL  end % endfor fin del ensamblaje    % submatrices de rigidez del sólido  KAA = KGS(1:NGLD,1:NGLD);            % submatriz K_{alpha,alpha}  KAB = KGS(1:NGLD,NGLD+1:NGLT);       % submatriz K_{alpha,beta}  KBA = KGS(NGLD+1:NGLT,1:NGLD);       % submatriz K_{beta,alpha}  KBB = KGS(NGLD+1:NGLT,NGLD+1:NGLT);  % submatriz K_{beta,beta}  TFIN = IMTIEM('',TINI);    TINI = IMTIEM('Vector de fuerzas de cuerpo en el solido',0);  % -------------------------------------------------------------------------  FGC = zeros(NGLT,1); % definición de tamaño del vector de fuer cuerp sólido  GAMT = sum(CAT(:,3));  if GAMT~=0; % contror de problemas sin fuerzas de cuerpo GAMM=0    for IELE = 1:NELE      % matriz de rigidéz de elemento      CAE(1:PCAT) = CAT(ELE(IELE,1),1:PCAT); % propiedades de la categ eleme IELE      NUEL = CAE(1,PMAT+3);  % número de nudos del elemento IELE      XYE(1:NUEL,1:NDIM) = XYZ(ELE(IELE,2:NUEL+1),1:NDIM); % coor nud de elem IELE      [FEL] = FELEMC(XYE,CAE); % vector de fuerzas de cuerpo del elemento      % ensamblaje de FEL() del elemento IELE en FGC() del sólido      NFEL = size(FEL,1); % tamaño de vector del elemento      for IFEL=1:NFEL        if INC(IELE, IFEL) ~= 0          FGC(INC(IELE, IFEL), 1) = FGC(INC(IELE, IFEL), 1) + FEL(IFEL,1);        end % endif      end % endfor IFEL      % fin ensamblaje    end % endfor  end % endif  TFIN = IMTIEM('',TINI);  TINI = IMTIEM('Vector de fuerzas de superficie en el solido',0);  % -------------------------------------------------------------------------  NFDI = size(FDI,1); % número de cargas distribuidas en elementos  FGS = zeros(NGLT,1); % definición de tamaño del vec fuerz superf del sólido  for IFDI = 1:NFDI % ciclo por carga distribuida    if FDI(IFDI,1)~=0; % control de problemas sin fuerzas de superficie      FDE = FDI(IFDI,:); % caracteristicas del lado      ICAT = ELE(FDI(IFDI,1),1); % identific de la categ del elemento cargado      CAE = CAT(ICAT,:); % propiedades de la categ eleme IELE      [NLA,LLAD,VLA] = PBLADO(XYZ,ELE,FDE); % número de lado y longitud      [FEL] = FELEMS(CAE,LLAD,NLA,VLA,FDE); % vec fuerza de superf del element      IELE=FDI(IFDI,1);      % ensamblaje de FEL() del elemento IELE en FGS() del sólido      NFEL = size(FEL,1); % tamaño de vector del elemento      for IFEL=1:NFEL        if INC(IELE, IFEL) ~= 0          FGS(INC(IELE, IFEL), 1) = FGS(INC(IELE, IFEL), 1) + FEL(IFEL,1);        end % endif      end % endfor IFEL      % fin ensamblaje     end % endif   end % endfor  TFIN = IMTIEM('',TINI);    TINI = IMTIEM('Vector de fuerzas aplicadas direct en los nudos del solido',0);  % -------------------------------------------------------------------------  [TEM] = ORTAEX(FUN,NNUD); % tabla de fuerzas puntuales extendida a todos nuds  [FGN] = ORTAVE(TEM,MGL); % vector de fuerzas en los nudos del sólido  % solo es valido del GL=1 hasta GL=NGLD, los términos donde GL>NGLD son las  % reacciones en los apoyos que aún son desconocidas  TFIN = IMTIEM('',TINI);    TINI = IMTIEM('Vector de fuerzas totales equival en los nudos del solido',0);  % -------------------------------------------------------------------------  % fuer.totales = fuer.eq.cuerpo + fuer.eq.superficie + fuer.aplic.direc.nudos  FGT = FGC + FGS + FGN;  FAA = FGT(1:NGLD,1); % subvec.fuer.totales conocidas alpha, entre 1<=GL<=NGLD  TFIN = IMTIEM('',TINI);    TINI = IMTIEM('Desplazamientos en los nudos del solido',0);  % -------------------------------------------------------------------------  % solución de un sistema de ecuaciones simultaneas para obtener el  % subvector de desplazamientos nodales desconocidos u_{alpha}  UAA = (KAA) \ (FAA - KAB * UBB);  UTO = [ UAA ; UBB ]; % vector de desplaz. nodales completo  [UXY] = ORVETA(UTO,MGL); % tabla de desplaz. nodales en formato UX,UY  TFIN = IMTIEM('',TINI);    TINI = IMTIEM('Reacciones en los nudos del solido',0);  % -------------------------------------------------------------------------  FGE = FGC + FGS;  % vector de fuerzas equival. de cuerpo y superficie  FGB = FGE(NGLD+1:NGLT,1); % subvector beta de fuer.equival.de cuerpo y superf  FBB = KBA * UAA + KBB * UBB - FGB; % subvector de fuerzas desconoc = reacciones  FTO = [ FAA ; FBB ]; % vector de fuerzas totales  [FXY] = ORVETA(FTO,MGL); % tabla de fuerzas nodales en formato FX,FY  TFIN = IMTIEM('',TINI);  if TIPR==10 % desplazamientos, deformac y esfuerzo de elem de armadura plana    TINI = IMTIEM('Fuerza interna en cada elemento',0);    SRE = zeros(NELE,5); % crear tabla de resultados por elemento en GiD     ERE = zeros(NELE,5); % se define y no se utiliza     for IELE = 1:NELE % ciclo por elemento            EYOU = CAT(ELE(IELE,1),1); % módulo de Young del elemento      AREA = CAT(ELE(IELE,1),4); % área de secc trans del elemento       TIPE = CAT(ELE(IELE,1),5); % código tipo del elemento       NUEL = CAT(ELE(IELE,1),6); % número de nudos del elemento      NGLE = NUEL*NGLN; % número de GL por elemento            XYE(1:NUEL,1:NDIM) = XYZ(ELE(IELE,2:NUEL+1),1:NDIM); % coor nud de elem IELE      XYP = zeros(1,2); % ubicación de puntos de Gauss o por nudos (no se usa)            [LONE,TRA] = PBTRAN(XYE);   % longitud y matriz de transformación del elem      UEG = EXTRAV(UTO,INC,IELE,NGLE); % vec despl nodales del elem en sis global      UEL = TRA * UEG; % vec despl nodales del elem en sis local      BEL = BELEME(XYE,XYP,TIPE);      EPEL = BEL * UEL;    % deformación en el elem      STEL = EYOU * EPEL;   % esfuerzo en el elem       NFEL = STEL * AREA;   % fuerza axial en el elem            % tabla de resultados      SRE(IELE,1) = IELE;      % número del elemento IELE      SRE(IELE,3) = EPEL;      % deformación del elemento IELE      SRE(IELE,4) = STEL;      % esfuerzo del elemento IELE      SRE(IELE,5) = NFEL;      % fuerza axial interna del elemento IELE        end % endfor    SRE         if (IMPR==2 || IMPR==3)      TINI = IMTIEM('\nPresentacion de resultados en GiD ',0);      % -----------------------------------------------------------------------      ADAD = strcat('./DATOS/',ADAT);      IMGIDM(ADAD,NNUD,NELE,NNUE,XYZ,ELE); % imprimir archivo de GiD .msh      IMGIDR(ADAD,NNUD,NELE,NNUE,NGAU,UXY,SRE,ERE); % imprimir arc de GiD .res           TFIN = IMTIEM('',TINI); % tiempo de ejecución    end % endif IMPR        if (IMPR==4 || IMPR==3)       TINI = IMTIEM('\nDibujar de geometría en Tikz LaTex ',0);     % -----------------------------------------------------------------------      % construir archivo gráfico tikz para latex con geometría      ADAD = strcat('./DATOS/',ADAT);      TIPN = 3; % numerar nudos y elementos      IMTIKZ(ADAD,NNUD,NELE,NNUE,XYZ,ELE,UCO,FUN,TIPN);      TFIN = IMTIEM('',TINI); % tiempo de ejecución    end % endif IMPR      end % endif TIPR==10 resultados de armadura plana        if (TIPR==20 || TIPR==20) % resultados de cond plana de esfuerzos o de deform      TINI = IMTIEM('Deformaciones y esfuerzos en cada elemento',0);    % -------------------------------------------------------------------------        if ENNU==0; NEVA=NGAU; end; % evaluada en los puntos de Gauss    if ENNU==1; NEVA=NNUE; end; % evaluada en los nudos    if ENNU==2; NEVA=1; end; % evaluada en el centro del elemento        SRE = zeros(NELE*NEVA,NCOM+6); % crear tabla de esfuerzos por elemento en GiD    ERE = zeros(NELE*NEVA,NCOM+5); % crear tabla de deformaci por elemento en GiD    IRES = 0; % índice de la tabla de esfuerzos y deformaciones para GiD        for IELE = 1:NELE % ciclo por elemento      NUEL = CAT(ELE(IELE,1),6); % número de nudos del elemento      NGLE = NUEL*NGLN; % número de GL por elemento      UEL = EXTRAV(UTO,INC,IELE,NGLE); % vector de despl nodales del elemento            TIPE = CAT(ELE(IELE,1),5); % código tipo del elemento          XYE(1:NUEL,1:NDIM) = XYZ(ELE(IELE,2:NUEL+1),1:NDIM); % coor nud de elem IELE      CAE = CAT(ELE(IELE,1),:); % propiedades de la categ eleme IELE      [DEL] = DELEME(CAE,TIPR); % matriz constitutiva del material          [TEM] = PBPGAU(NEVA, NDIM, ENNU); % ubicación y ponder de puntos de Gauss      POIS = CAE(2);  % relación de Poisson            for IEVA = 1:NEVA % ciclo por punto de Gauss o por nudo        XYP = TEM(IEVA,1:2); % ubicación de puntos de Gauss o por nudos        %printf('elemento %g en el punto %g: \n',IELE,IEVA);        BEL = BELEME(XYE,XYP,TIPE); % matriz B en el punto de Gauss o nudo IGAU        EPE = BEL * UEL; % vector de deformaciones del elem. IELE en el punto IGAU        STE = DEL * EPE; % vector de esfuerzos del elem. IELE en el punto IGAU        [SPR,TPR,STVM] = TRPRIN(STE,POIS,TIPR,0); % vector de esfuerzo principales        [EPR,TPR,DUMY] = TRPRIN(EPE,POIS,TIPR,1); % vector de deformac principales                % preparar tabla de esfuerzos y de deformaciones por elemento para GiD        % con elemento de valor constante en su interior        IRES = IRES+1; % ubicación del resultado en la tabla SRE() o ERE()                SRE(IRES,1) = IELE; % tabla de esfuerzos, número del elemento IELE        ERE(IRES,1) = IELE; % tabla de deformaci, número del elemento IELE        if ENNU==0          % evaluación en puntos de Gauss          SRE(IRES,2) = IEVA; % tabla de esfuerzos, número del PG          ERE(IRES,2) = IEVA; % tabla de deformaci, número del PG        elseif ENNU==1          % evaluación en nudos          SRE(IRES,2) = ELE(IELE,IEVA+1); % tabla de esfuerzo, número del nudo          ERE(IRES,2) = ELE(IELE,IEVA+1); % tabla de deformac, número del nudo        elseif ENNU==2          % evaluación en el centro          SRE(IRES,2) = 0; % tabla de esfuerzo, 0 indica el centro          ERE(IRES,2) = 0; % tabla de deformac, 0 indica el centro               end % endif                for ICOM = 1:NCOM % componente de esfuerzo leida            SRE(IRES, ICOM+2) = STE(ICOM, 1); % tabla de esfuerzos SXX, SYY, SXY            ERE(IRES, ICOM+2) = EPE(ICOM, 1); % tabla de deformaciones EXX, EYY, GXY        end % endfor ICOM        for JCOM = 1:3 % esfuerzos o deformaciones principales            SRE(IRES, JCOM+NCOM+2) = SPR(JCOM, 1); % tabla esf.princ SP1,SP2,SP3            ERE(IRES, JCOM+NCOM+2) = EPR(JCOM, 1); % tabla defor.princ EP1,EP2,EP3        end % endfor JCOM        SRE(IRES, NCOM+6) = STVM; % esfuerzo de von Mises              end % endfor IGAU    end % endfor IELE    TFIN = IMTIEM('',TINI);    % Presentación de resultados    % -------------------------------------------------------------------------      if (IMPR==1 || IMPR==3)      TINI = IMTIEM('\nPresentacion de resultados en ventana de comandos \n',0);      % -----------------------------------------------------------------------          IMRESU(NNUD,ENNU,UXY,FXY,SRE,ERE); % imprimir resultados en ventana      TFIN = IMTIEM('',TINI); % tiempo de ejecución    end % endif        if (IMPR==2 || IMPR==3)      TINI = IMTIEM('\nPresentacion de resultados en GiD ',0);      % -----------------------------------------------------------------------      ADAD = strcat('./DATOS/',ADAT);      IMGIDM(ADAD,NNUD,NELE,NNUE,XYZ,ELE); % imprimir archivo de GiD .flavia.msh      IMGIDR(ADAD,NNUD,NELE,NNUE,NGAU,UXY,SRE,ERE); % imprimir archivo de GiD .flavia.re    end % endif IMPR            end % endif       % mostrar tiempo final  TFIN = IMTIEM('Tiempo total de ejecucion',TINT);end